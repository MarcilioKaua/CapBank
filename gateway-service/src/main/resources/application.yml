server:
  port: 8081

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      metrics:
        enabled: true
      routes:
        - id: frontend-service
          uri: ${services.frontend.base-url:http://localhost:8080}
          predicates:
            - Path=/
            - Path=/index.html
            - Path=/favicon.ico
            - Path=/assets/**
            - Path=/{path:^(?!api).*$}/**
          filters:
            - StripPrefix=0
        - id: user-login-proxy
          uri: ${services.auth.base-url:http://localhost:8083}
          predicates:
            - Path=/api/user/login
          filters:
            - SetPath=/api/auth/login
            - name: CircuitBreaker
              args:
                name: authCircuit
                fallbackUri: forward:/fallback/service-unavailable
        - id: user-service
          uri: ${services.user.base-url:http://localhost:8082}
          predicates:
            - Path=/api/user/**
          filters:
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT,INTERNAL_SERVER_ERROR
                methods: GET,POST,PUT,DELETE
            - name: CircuitBreaker
              args:
                name: userCircuit
                fallbackUri: forward:/fallback/service-unavailable
        - id: auth-service
          uri: ${services.auth.base-url:http://localhost:8083}
          predicates:
            - Path=/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: authCircuit
                fallbackUri: forward:/fallback/service-unavailable
        - id: account-service
          uri: ${services.account.base-url:http://localhost:8084}
          predicates:
            - Path=/api/bankaccount/**
          filters:
            - name: CircuitBreaker
              args:
                name: accountCircuit
                fallbackUri: forward:/fallback/service-unavailable
        - id: transaction-service
          uri: ${services.transaction.base-url:http://localhost:8085}
          predicates:
            - Path=/api/transaction/**,/api/transaction-history/**
          filters:
            - name: CircuitBreaker
              args:
                name: transactionCircuit
                fallbackUri: forward:/fallback/service-unavailable
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin, RETAIN_UNIQUE
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

resilience4j:
  circuitbreaker:
    instances:
      userServiceCircuit:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
  timelimiter:
    userServiceCircuit:
      timeoutDuration: 10s

jwt:
  secret: VGhpcyBpcyBhIHZlcnkgc2VjdXJlIHNlY3JldCBrZXkhIQ==

services:
  frontend:
    base-url: ${FRONTEND_SERVICE_BASE_URL:http://localhost:8080}
  user:
    base-url: ${USER_SERVICE_BASE_URL:http://localhost:8082}
  auth:
    base-url: ${AUTH_SERVICE_BASE_URL:http://localhost:8083}
  account:
    base-url: ${ACCOUNT_SERVICE_BASE_URL:http://localhost:8084}
  transaction:
    base-url: ${TRANSACTION_SERVICE_BASE_URL:http://localhost:8085}

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: false
